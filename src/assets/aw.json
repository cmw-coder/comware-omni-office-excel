[
    {
        "Business_Tag": "OSPF区域",
        "AW_Name": "OSPF配置区域",
        "AW_CONTENT_Example": "- AW名: OSPF配置区域\n> 功能介绍: 在接口上激活OSPF使能,修改接口所在OSPF区域\n> 参数介绍:\n- [x] **dut**\n: 必选.设备对象.获取方法如:dut1 = getattr(gl,'DUT1')\n- [x] **pro_number**\n: 必选.OSPF协议号\n- [x] **area_id**\n: 必选.为OSPF区域.必须为非0值\n- [x] **port**\n: 必选.为接口对象.获取方式如:port = getattr(dut1,PORT1)获取了DUT1设备上PORT1接口对象\n> 返回值: 无\n```python\n<dut>.send(\n'''\nctrl+zsystem-view\nospf <pro_num>\narea <area_id>\nnetwork <port>.ip <port>.hostmask\n''')\n或\n<dut>.send(\n'''\nctrl+zsystem-view\ninterface <port>.intf\nospf <pro_num> area <area_id>\n''')\n```"
    },
    {
        "Business_Tag": "OSPF区域",
        "AW_Name": "OSPF Stub区域",
        "AW_CONTENT_Example": "- OSPF STUB区域\n: 在OSPF的某个非0区域中,配置为Stub区域\n- [x]  **dut**为设备对象\n: 必选.\n- [x]  **pro_number**为协议号\n: 必选\n- [x]  **area_id**为区域\n: 必选\n- [ ]  **kwargs**可选为以下值.\n: 可选\n    - router-id auto-select.\n    - router-id <router-id>.\n     : router-id需要格式为ip地址格式\n    - vpn-instance {instance_name}. {instance_name}为变量\n    : instance_name需要预先通过vpn AW创建\n\n1. 进入OSPF的区域视图,配置区域为stub\n```python\n{dut}.send(\n'''\nctrl+zsystem-view\nospf <pro_number> *<kwargs>\narea <area_id>\nstub\n''')\n``` "
    },
    {
        "Business_Tag": "OSPF区域",
        "AW_Name": "OSPF虚链接",
        "AW_CONTENT_Example": "- AW名:OSPF虚连接区域\n> 功能介绍:将OSPF某个非0区域配置为虚连接.需在OSPF区域的两端路由器都配置才可建立vlink peer.\n\n> 参数介绍:\n- [x] **dut**为设备对象\n: 必选.获取方法如:dut1 = getattr(gl,'DUT1')\n- [x] **pro_number**为协议号\n: 必选\n- [x] **area_id**为区域\n: 必选.必须为非0值\n- [x]  **kwargs1**可选为以下关键字值\n: 必选\n    - router-id <router-id>.\n     : router-id需要格式为ip地址格式\n```python\n<dut1>.send(\n'''\nctrl+zsystem-view\nospf <pro_num> router-id <router_id_1>\narea <area_id>\nvlink-peer <router_id_2>\n''')\n<dut2>.send(\n'''\nctrl+zsystem-view\nospf <pro_num> router-id <router_id_2>\narea <area_id>\nvlink-peer <router_id_1>\n''')\n```\n"
    },
    {
        "Business_Tag": "OSPF网络类型",
        "AW_Name": "OSPF广播网络类型",
        "AW_CONTENT_Example": "- AW名:OSPF广播网络类型\n> 功能介绍:将指定接口配置为广播网络类型.\n\n> 参数介绍:\n- [x] **dut**为设备对象\n: 必选.获取方法如:dut1 = getattr(gl,'DUT1')\n- [x] **pro_number**为协议号\n: 必选\n- [x] **port**\n: 必选.为接口对象.通过port = getattr(dut1,PORT1)获取了DUT1设备上PORT1接口对象\n```python\n<dut>.send(\nf'''\nctrl+zsystem-view\ninterface {<port>.intf}\nospf network-type broadcast\n''')\n```"
    },
    {
        "Business_Tag": "OSPF路由聚合",
        "AW_Name": "OSPF区域间路由聚合",
        "AW_CONTENT_Example": "- AW名:OSPF 区域间路由聚合\n> 功能说明:配置ABR路由聚合\n> 参数说明:\n    - [x]  **dut**为设备对象\n    : 必选\n    - [x]  **pro_number**为协议号\n    : 必选\n    - [x]  **area_id**为区域\n    : 必选\n    - [x]  **ip_address**为聚合路由目的地址\n    : 必选\n    - [x]  **mask_len**为聚合路由的掩码长度或掩码值\n    : 必选\n    - [ ]  **args**可选为以下值\n    : 可选.缺省为发布这条路由\n        - advertise\n        : 发布这条聚合路由 \n        - not-advertise\n        : 不发布这条聚合路由  \n    - [ ] **kwargs** 可选为以下关键字\n    : 可选\n        - cost **value**\n        : 聚合路由的开销值value，取值范围为1～16777215，缺省值为所有被聚合的路由中最大的开销值\n```python\n<dut>.send(\n'''\nctrl+zsystem-view\nospf <pro_num>\narea <area_id>\nabr-summary <ip-address> <args> <kwargs>\n''')\n```"
    },
    {
        "Business_Tag": "OSPF路由聚合",
        "AW_Name": "OSPF外部路由聚合",
        "AW_CONTENT_Example": "- AW名:OSPF外部路由聚合\n> 功能说明:ASBR角色路由器上配置将指定网段路由聚合\n> 参数说明:\n    - [x]  **dut**为设备对象\n    : 必选.获取方式如:dut1=getattr(gl,'DUT1'),'DUT1'为设备名称\n    - [x]  **pro_number**为协议号\n    : 必选\n    - [x]  **ip_address**为聚合路由目的地址\n    : 必选\n    - [x]  **mask_len**为聚合路由的掩码长度或掩码值\n    : 必选\n    - [ ]  **args**可选为以下值\n    : 可选.缺省为发布这条路由\n        - advertise\n        : 发布这条聚合路由 \n        - not-advertise\n        : 不发布这条聚合路由  \n    - [ ] **kwargs** 可选为以下关键字\n    : 可选\n        - cost **arg1**\n        : 聚合路由的开销值value，取值范围为1～16777215，缺省值为所有被聚合的路由中最大的开销值\n        - tag **arg2**\n        : 聚合路由的tag值value，取值范围为0～4294967295，缺省值为1.\n```python\n<dut>.send(\n'''\nctrl+zsystem-view\nospf <pro_num>\nasbr-summary <ip-address> <args> <kwargs>\n''')\n```"
    },
    {
        "Business_Tag": "OSPF引入路由",
        "AW_Name": "OSPF引入外部路由",
        "AW_CONTENT_Example": "- AW名:OSPF引入外部路由\n> 功能介绍:配置OSPF引入静态协议路由\n> 参数说明:\n- [x]  **dut**为设备对象\n: 必选\n- [x]  **pro_number**为协议号\n: 必选\n- [x]  **arg1**可选为以下值\n: 必选.可选以下值\n    - bgp\n    : bgp协议路由.\n    - direct \n    : 直连路由\n    - static\n    : 静态路由.\n    - direct \n    : 直连路由\n    - unr \n    : UNR协议路由\n    - eigrp \n    : eigrp协议路由\n    - isis \n    : isis协议路由\n    - ospf \n    : ospf协议路由\n    - rip \n    : rip协议路由\n```python\n<dut>.send(\n'''\nctrl+zsystem-view\nospf <pro_num>\nimport-route static <arg1>\n''')\n```"
    },
    {
        "Business_Tag": "OSPF引入路由",
        "AW_Name": "OSPF引入静态路由",
        "AW_CONTENT_Example": "- AW名:OSPF引入静态协议路由\n> 功能介绍:配置OSPF引入静态协议路由\n\n> 参数说明:\n    - [x]  **dut**为设备对象\n    : 必选\n    - [x]  **pro_number**为协议号\n    : 必选\n    - [ ]  **arg1**可选为以下值\n        - cost <value>\n        : 聚合路由的开销值value，取值范围为1～16777215\n        - inherit-cost\n        : 不通告聚合路由 \n    - [ ]  **arg2**可选为以下值\n        - nssa-only\n        :设置引入的Type-7 LSA的P比特位为不置位，即在对端路由器上不能转为Type-5 LSA.\n    - [ ] **kwarg1** 可选为以下关键字参数\n    : 可选\n        - route-policy <route-policy-name>\n        : 配置只能引入符合指定路由策略的路由\n        - tag <tag-value>\n        : 外部LSA中的标记，取值范围为0～4294967295，缺省值为1\n        - type <type_value>\n        : 度量值类型，取值范围为1～2，缺省值为2\n    - [x] **dst_ip** \n    : 必选.为静态路由的ip地址,地址必须不为当前已知地址\n    - [x] **masklen** \n    : 必选.为静态路由的掩码长度\n    - [ ] **out_int**\n    : 可选.为静态路由出接口  \n    - [x] **nexthop**\n    : 必选.为静态路由的下一跳地址 \n```python\n<dut>.send(\n'''\nctrl+zsystem-view\nip route-static <dst_ip> <masklen> <out_intf> <nexthop>\nospf <pro_num>\nimport-route static <arg1> <arg2> <kwarg1>\n''')\n```"
    },
    {
        "Business_Tag": "OSPF引入路由",
        "AW_Name": "OSPF引入BGP路由",
        "AW_CONTENT_Example": "- AW名:引入bgp协议路由\n> 功能介绍:配置OPF引入BGP协议路由\n> 参数说明:\n- [x]  **dut**为设备对象\n: 必选\n- [x]  **pro_number**为协议号\n: 必选\n- [ ]  **arg1**可选为以下值\n    - <as-number>\n    : BGP指定协议号\n- [ ]  **arg2**可选为以下值\n    - allow-ibgp \n    : 是否允许IBGP路由引入\n- [ ]  **arg3**可选为以下值\n    - cost <value>\n    : 聚合路由的开销值value，取值范围为1～16777215\n    - inherit-cost\n    : 不通告聚合路由 \n- [ ]  **arg4**可选为以下值\n    - nssa-only\n    :设置引入的Type-7 LSA的P比特位为不置位，即在对端路由器上不能转为Type-5 LSA.\n- [ ] **kwarg1** 可选为以下关键字参数\n: 可选\n    - route-policy <route-policy-name>\n    : 配置只能引入符合指定路由策略的路由\n- [ ] **kwarg2** 可选为以下关键字参数\n: 可选\n    - tag <tag-value>\n    : 外部LSA中的标记，取值范围为0～4294967295，缺省值为1\n- [ ] **kwarg3** 可选为以下关键字参数\n: 可选\n    - type <type_value>\n    : 度量值类型，取值范围为1～2，缺省值为2 \n```python\n<dut>.send(\n'''\nctrl+zsystem-view\nospf <pro_num>\nimport-route bgp <arg1> <arg2> <arg3> <arg4> <kwarg1> <kwarg2> <kwarg3>\n''')\n```"
    },
    {
        "Business_Tag": "OSPF引入路由",
        "AW_Name": "OSPF引入5类缺省路由",
        "AW_CONTENT_Example": "- AW名:OSPF引入5类缺省路由\n> 功能说明: OSPF发布type-5 LS ID为0.0.0.0地址的LSA.\n> 参数说明:\n    - [x]  **dut**为设备对象\n    : 必选\n    - [x]  **pro_number**为协议号\n    : 必选\n    - [ ]  **arg1**可选为以下值\n    : 可选.\n        - always\n        : 无论本地路由表是否存在激活的非本OSPF进程的缺省路由,均可产生一个描述缺省路由的Type-5 LSA发布出去\n        - permit-calculate-other\n        : 本地路由表存在激活的非本OSPF进程的缺省路由时，才会产生并发布一个描述缺省路由的Type-5 LSA发布出去，且路由器仍然计算来自于其他路由器的缺省路由 \n    - [ ] **kwarg1** 可选为以下关键字\n    : 可选\n        - cost <value>\n        : 该缺省路由的度量值，取值范围为0～16777214。如果没有指定本参数，缺省路由的度量值将取default cost命令配置的值\n    - [ ] **kwarg2** 可选为以下关键字\n    : 可选\n        - route-policy <route-policy-name>\n        : 本地存在匹配的非本OSPF进程产生的缺省路由时，按照路由策略的配置参数发布缺省路由\n    - [ ] **kwarg3** 可选为以下关键字参数\n    : 可选\n        - type <type_value>\n        : 度量值类型，取值范围为1～2，缺省值为2 \n```python\n<dut>.send(\n'''\nctrl+zsystem-view\nospf <pro_num>\ndefault-route-advertise <arg1> <kwarg1> <kwarg2> <kwarg3>\n''')\n```"
    },
    {
        "Business_Tag": "OSPF引入路由",
        "AW_Name": "OSPF引入3类缺省路由",
        "AW_CONTENT_Example": "- AW名:OSPF发布缺省路由为summary\n> 功能说明:发布type-3类LSA,地址为0.0.0.0的3类路由\n    - [x] **dut**为设备对象\n    : 必选\n    - [x] **pro_number**为协议号\n    : 必选\n    - [ ] **kwarg1** 可选为以下关键字\n    : 可选\n        - cost <value>\n        : 该缺省路由的度量值，取值范围为0～16777214。如果没有指定本参数，缺省路由的度量值将取default cost命令配置的值\n\n```python\n<dut>.send(\n'''\nctrl+zsystem-view\nospf <pro_num>\ndefault-route-advertise summary <kwarg1>\n''')\n```"
    },
    {
        "Business_Tag": "OSPF LSA控制",
        "AW_Name": "OSPF过滤Type-3 LSA",
        "AW_CONTENT_Example": "- OSPF过滤Type-3 LSA\n> OSPF过滤LSA\n    - [x]  **dut**为设备对象\n    : 必选\n    - [x]  **pro_number**为协议号\n    : 必选\n    - [x]  **area_id**为区域\n    : 必选\n    - [x] **match_module** \n    : 必选.为ip prefix-list的匹配模式\n        - permit\n        : 允许通过匹配  \n        - deny\n        : 不允许通过匹配 \n    - [x] **ip** \n    : 必选.为ip prefix-list匹配路由地址的ip地址\n    - [x] **masklen** \n    : 必选.为ip prefix-list匹配路由地址的掩码长度\n    - [x] **rtp_name** \n    : 必选.为路由策略的名称\n        - permit\n        : 允许通过匹配  \n        - deny\n        : 不允许通过匹配\n    - [x] **node**\n    : 必选.路由策略使用节点或ip prefix-list的节点\n    - [x] **arg1**\n    : 必选.\n        - import\n        : 对ABR向本区域发布的Type-3 LSA进行过滤\n        - export\n        : 对ABR向其它区域发布的Type-3 LSA进行过滤  \n```python\n<dut>.send(\n'''\nctrl+zsystem-view\nip prefix-list type_3_lsa index <node> <match_module> <ip> <masklen>\nroute-policy <rtp_name> permit node <node>\nif-match ip address prefix-list type_3_lsa\nctrl+zsystem-view\nospf <pro_num>\narea <area_id> \nfilter route-policy type_3_lsa <arg1>\n''')\n```"
    },
    {
        "Business_Tag": "OSPF LSA控制",
        "AW_Name": "OSPF控制LSDB中External LSA的最大数量",
        "AW_CONTENT_Example": "#DUT1上配置OSPF的LSDB中External LSA的最大条目数为3\n\t\tgl.DUT1.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\tsystem-view\n\t\t\t\tip route-static 2.3.4.5 32 NULL0\n\t\t\t\tip route-static 2.3.4.6 32 NULL0\n\t\t\t\tip route-static 2.3.4.7 32 NULL0\n\t\t\t\tip route-static 2.3.4.8 32 NULL0\n\t\t\t\tospf 65535\n\t\t\t\timport-route static\n\t\t\t\tlsdb-overflow-limit 3 \n\t\t\t\t''')"
    },
    {
        "Business_Tag": "OSPF LSA控制",
        "AW_Name": "OSPF过滤接口出方向的LSA",
        "AW_CONTENT_Example": "#DUT1上port1配置对接口出方向的所有LSA进行过滤\n        gl.DUT1.send(f'''\n                ctrl+z\n                system-view\n                interface {gl.DUT1.PORT1.name}\n                ospf database-filter all\n                ''')"
    },
    {
        "Business_Tag": "OSPF LSA控制",
        "AW_Name": "OSPF过滤发送给指定邻居的LSA",
        "AW_CONTENT_Example": "#DUT1上过滤指定邻居DUT2的所有LSA\n\t\tgl.DUT2.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\tsystem-view\n\t\t\t\tinterface {gl.DUT2.PORT1.name}\n\t\t\t\tospf network-type p2mp\n\t\t\t\t''')\n\t\tgl.DUT1.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\tsystem-view\n\t\t\t\tinterface {gl.DUT1.PORT1.name}\n\t\t\t\tospf network-type p2mp\n\t\t\t\tospf 65535\n\t\t\t\tdatabase-filter peer {gl.DUT2.PORT1.ip} all\n\t\t\t\t''')"
    },
    {
        "Business_Tag": "OSPF LSA控制",
        "AW_Name": "OSPF路由震荡更新抑制",
        "AW_CONTENT_Example": "#DUT1上配置路由震荡10次后，OSPF将要对重复到达的LSA进行抑制，抑制时间为5秒，配置路由震荡10次后，OSPF将抑制更新LSA，抑制时间为3秒\n\t\tgl.DUT1.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\tsystem-view\n\t\t\t\tospf 65535\n\t\t\t\tlsa-arrival-interval suppress-flapping 5 threshold 10\n\t\t\t\tlsa-generation-interval suppress-flapping 3 threshold 10\n\t\t\t\t''')"
    },
    {
        "Business_Tag": "OSPF路由过滤",
        "AW_Name": "OSPF对通过接收到的LSA计算出来的路由信息进行过滤",
        "AW_CONTENT_Example": "- 对OSPF计算的路由过滤\n> 使用高级ACL过滤指定目的和掩码的路由\n    - [x]  **dut**为设备对象\n    : 必选\n    - [x]  **pro_number**为协议号\n    : 必选\n    - [x] **acl_num** \n    : 必选.为acl的名称  \n    - [x] **match_module** \n    : 必选.为acl的匹配模式\n        - permit\n        : 允许通过匹配  \n        - deny\n        : 不允许通过匹配 \n    - [x] **src_ip** \n    : 必选.为过滤路由目的地址的ip地址\n    - [x] **src_masklen** \n    : 必选.为过滤路由目的地址的掩码长度\n    - [x] **dst_ip** \n    : 必选.为过滤目的路由掩码的地址\n    - [x] **dst_masklen** \n    : 必选.为过滤目的路由掩码的地址掩码长度 \n```python\n<dut>.send(\n'''\nctrl+zsystem-view\nacl advanced <acl_num> \nrule 1 permit permit ip source <src_ip> <src_masklen> destination <dst_ip> <dst_masklen>\nctrl+zsystem-view\nospf <pro_num>\nfilter-policy <acl_num> import\n''')\n```\n"
    },
    {
        "Business_Tag": "OSPF路由过滤",
        "AW_Name": "OSPF对引入的路由进行过滤",
        "AW_CONTENT_Example": "#DUT1配置OSPF进程65535使用编号为3000的高级ACL对引入的路由进行过滤，只允许113.0.0.0/16通过\n\t\tgl.DUT1.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\tsystem-view\n\t\t\t\tacl advanced 3000\n\t\t\t\trule 10 permit ip source 113.0.0.0 0 destination 255.255.0.0 0\n\t\t\t\trule 100 deny ip\n\t\t\t\tospf 65535\n\t\t\t\tfilter-policy 3000 export\n\t\t\t\t''')"
    },
    {
        "Business_Tag": "OSPF定时器",
        "AW_Name": "OSPF报文定时器",
        "AW_CONTENT_Example": "#DUT1、DUT2配置OSPF报文定时器，Hello定时器5s，邻居失效时间（dead）25s，接口重传LSA的时间间隔（retransmit）6s，Poll定时器15s\n\t\tgl.DUT1.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\tsystem-view\n\t\t\t\tinterface {gl.DUT1.PORT1.name}\n\t\t\t\tospf timer hello 5\n\t\t\t\tospf timer dead 25\n\t\t\t\tospf timer retransmit 6\n\t\t\t\tospf timer poll 15\n\t\t\t\t''')\n\t\tgl.DUT2.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\tsystem-view\n\t\t\t\tinterface {gl.DUT2.PORT1.name}\n\t\t\t\tospf timer hello 5\n\t\t\t\tospf timer dead 25\n\t\t\t\tospf timer retransmit 6\n\t\t\t\tospf timer poll 15\n\t\t\t\t''')"
    },
    {
        "Business_Tag": "OSPF定时器",
        "AW_Name": "OSPF接口传送LSA的延迟时间",
        "AW_CONTENT_Example": "#DUT1、DUT2配置接口传送LSA的延迟时间为2s\n\t\tgl.DUT1.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\tsystem-view\n\t\t\t\tinterface {gl.DUT1.PORT1.name}\n\t\t\t\tospf trans-delay 2\n\t\t\t\t''')\n\t\tgl.DUT2.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\tsystem-view\n\t\t\t\tinterface {gl.DUT2.PORT1.name}\n\t\t\t\tospf trans-delay 2\n\t\t\t\t''')"
    },
    {
        "Business_Tag": "OSPF定时器",
        "AW_Name": "OSPF路由计算的时间间隔",
        "AW_CONTENT_Example": "#配置DUT1的OSPF路由计算最大时间间隔为10秒，最小时间间隔为500毫秒，惩罚增量为300毫秒\n\t\tgl.DUT1.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\tsystem-view\n\t\t\t\tospf 65535\n\t\t\t\tspf-schedule-interval 10 500 300\n\t\t\t\t''')"
    },
    {
        "Business_Tag": "OSPF定时器",
        "AW_Name": "OSPF接收LSA的时间间隔",
        "AW_CONTENT_Example": "#配置DUT1的OSPF接收LSA的最大时间间隔为2000毫秒，最小时间间隔为100毫秒，惩罚增量为300毫秒\n\t\tgl.DUT1.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\tsystem-view\n\t\t\t\tospf 65535\n\t\t\t\tlsa-arrival-interval 2000 100 300\n\t\t\t\t''')"
    },
    {
        "Business_Tag": "OSPF定时器",
        "AW_Name": "OSPF更新LSA的时间间隔",
        "AW_CONTENT_Example": "#配置DUT1的OSPF更新LSA的最大时间间隔为2秒，最小时间间隔为100毫秒，惩罚增量为100毫秒\n\t\tgl.DUT1.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\tsystem-view\n\t\t\t\tospf 65535\n\t\t\t\tlsa-generation-interval 2 100 100\n\t\t\t\t''')"
    },
    {
        "Business_Tag": "OSPF定时器",
        "AW_Name": "OSPF尝试退出overflow状态的定时器时间间隔",
        "AW_CONTENT_Example": "#DUT1上配置OSPF尝试退出overflow的定时器间隔为10秒\n        gl.DUT1.send(f'''\n                ctrl+z\n                system-view\n                ospf 65535\n                lsdb-overflow-interval 10\n                ''')"
    },
    {
        "Business_Tag": "OSPF报文控制",
        "AW_Name": "禁止接口收发OSPF报文",
        "AW_CONTENT_Example": "#DUT1上禁止接口port1收发OSPF报文\n\t\tgl.DUT1.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\tsystem-view\n\t\t\t\tospf 65535\n\t\t\t\tsilent-interface {gl.DUT1.PORT1.intf}\n\t\t\t\t''')"
    },
    {
        "Business_Tag": "OSPF报文控制",
        "AW_Name": "DD报文中的MTU",
        "AW_CONTENT_Example": "#DUT1、DUT2上配置DD报文中MTU域的值为发送该报文接口的MTU值\n\t\tgl.DUT1.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\tsystem-view\n\t\t\t\tinterface {gl.DUT1.PORT1.name}\n\t\t\t\tospf mtu-enable\n\t\t\t\t''')\n\t\tgl.DUT2.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\tsystem-view\n\t\t\t\tinterface {gl.DUT2.PORT1.name}\n\t\t\t\tospf mtu-enable\n\t\t\t\t''')"
    },
    {
        "Business_Tag": "OSPF报文控制",
        "AW_Name": "OSPF发送协议报文的DSCP优先级",
        "AW_CONTENT_Example": "#DUT2上配置OSPF进程65535发送协议报文的DSCP优先级为63\n\t\tgl.DUT2.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\tsystem-view\n\t\t\t\tospf 65535\n\t\t\t\tdscp 63\n\t\t\t\t''')"
    },
    {
        "Business_Tag": "OSPF报文控制",
        "AW_Name": "接口发送OSPF报文的最大长度",
        "AW_CONTENT_Example": "#DUT1、DUT2上配置接口PORT1发送OSPF报文的最大长度为1000字节\n\t\tgl.DUT1.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\tsystem-view\n\t\t\t\tinterface {gl.DUT1.PORT1.name}\n\t\t\t\tospf packet-size 1000\n\t\t\t\t''')\n\t\tgl.DUT2.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\tsystem-view\n\t\t\t\tinterface {gl.DUT2.PORT1.name}\n\t\t\t\tospf packet-size 1000\n\t\t\t\t''')"
    },
    {
        "Business_Tag": "OSPF报文控制",
        "AW_Name": "控制LSU报文的泛洪速率",
        "AW_CONTENT_Example": "#DUT1上OSPF进程65535的所有接口发送LSU报文的时间间隔为30毫秒，一次最多发送10个LSU报文\n\t\tgl.DUT1.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\tsystem-view\n\t\t\t\tospf 65535\n\t\t\t\ttransmit-pacing interval 30 count 10\n\t\t\t\t''')"
    },
    {
        "Business_Tag": "OSPF邻居震荡",
        "AW_Name": "OSPF邻居震荡",
        "AW_CONTENT_Example": "#OSPF邻居震荡，震荡DUT1和DUT2之间的接口，DUT1和DUT2之间的OSPF邻居震荡\n\t\tgl.DUT1.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\tsystem-view\n\t\t\t\tinterface {gl.DUT1.PORT1.intf}\n\t\t\t\tshutdown\n\t\t\t\t''')\n\n\t\tgl.DUT1.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\tsystem-view\n\t\t\t\tinterface {gl.DUT1.PORT1.intf}\n\t\t\t\tundo shutdown\n\t\t\t\t''')"
    },
    {
        "Business_Tag": "OSPF邻居震荡",
        "AW_Name": "OSPF邻居震荡后检查LSA",
        "AW_CONTENT_Example": "#OSPF邻居震荡，震荡DUT1和DUT2之间的接口，DUT1和DUT2之间的OSPF邻居震荡，震荡结束后检查DUT1和DUT2之间的邻居状态为FULL\n\t\tgl.DUT1.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\tsystem-view\n\t\t\t\tinterface {gl.DUT1.PORT1.intf}\n\t\t\t\tshutdown\n\t\t\t\t''')\n\n\t\tgl.DUT1.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\tsystem-view\n\t\t\t\tinterface {gl.DUT1.PORT1.intf}\n\t\t\t\tundo shutdown\n\t\t\t\t''')\n\t\t# 等待 10 s\n\t\tatf_wait('固定等待', 10)  \t\t\n\t\t#检查DUT1上OSPF进程65535的所有LSA信息\n\t\tgl.DUT1.CheckCommand('检查DUT1上OSPF进程65535的所有LSA信息，存在1类LSA 10.2.1.1，2类LSA 11.3.1.1，3类LSA 10.3.1.1',\n\t\t\t\t\t\t\tcmd='display ospf 65535 lsdb',\n\t\t\t\t\t\t\texpect=['Router    10.2.1.1',\n\t\t\t\t\t\t\t'Network   11.3.1.1',\n\t\t\t\t\t\t\t'Sum-Net   10.3.1.1'],\n\t\t\t\t\t\t\trelationship = 'and',\n\t\t\t\t\t\t\tstop_max_attempt=6,\n\t\t\t\t\t\t\twait_fixed=5)"
    },
    {
        "Business_Tag": "OSPF邻居震荡",
        "AW_Name": "OSPF邻居震荡后检查路由",
        "AW_CONTENT_Example": "#OSPF邻居震荡，震荡DUT1和DUT2之间的接口，DUT1和DUT2之间的OSPF邻居震荡，震荡结束后检查DUT1上路由信息\n\t\tgl.DUT1.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\tsystem-view\n\t\t\t\tinterface {gl.DUT1.PORT1.intf}\n\t\t\t\tshutdown\n\t\t\t\t''')\n\n\t\tgl.DUT1.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\tsystem-view\n\t\t\t\tinterface {gl.DUT1.PORT1.intf}\n\t\t\t\tundo shutdown\n\t\t\t\t''')\n\t\t# 等待 10 s\n\t\tatf_wait('固定等待', 10)  \t\t\n\t\t#检查DUT1上OSPF路由信息\n\t\tgl.DUT1.CheckCommand('检查DUT1上OSPF进程65535存在DUT5的loopback0接口的OSPF路由10.5.1.1',\n\t\t\t\t\t\t\tcmd='display ospf 65535 routing  10.5.1.1 32',\n\t\t\t\t\t\t\texpect=['10.5.1.1/32        2        Inter'],\n\t\t\t\t\t\t\trelationship = 'and',\n\t\t\t\t\t\t\tstop_max_attempt=6,\n\t\t\t\t\t\t\twait_fixed=5) \n\t\tgl.DUT1.CheckCommand('DUT1 ping DUT5的loopback0可以ping通',\n\t\t\t\t\t\t\tcmd='ping -a 10.1.1.1 10.5.1.1',\n\t\t\t\t\t\t\texpect=['5 packet(s) received, 0.0% packet loss'],\n\t\t\t\t\t\t\trelationship = 'and',\n\t\t\t\t\t\t\tstop_max_attempt=3,\n\t\t\t\t\t\t\twait_fixed=5)\n"
    },
    {
        "Business_Tag": "OSPF Reset进程",
        "AW_Name": "OSPF Reset进程",
        "AW_CONTENT_Example": "#OSPF Reset进程\n\t\tgl.DUT1.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\treset ospf 65535 process\n\t\t\t\ty\n\t\t\t\t''')"
    },
    {
        "Business_Tag": "OSPF Reset进程",
        "AW_Name": "OSPF Reset进程后检查邻居状态",
        "AW_CONTENT_Example": "- OSPF reset进程后检查邻居状态\n> 功能介绍: 通过reset指定OSPF进程触发进程重建立邻居和LSDB库,并检查OSPF协议邻居状态恢复\n> 参数说明:\n- [x]  **dut**\n: 必选.为设备对象.获取方式如:dut1=getattr(gl,'DUT1'),'DUT1'为设备名称\n- [x]  **pro_number**\n: 必选.为OSPF协议号或进程号\n- [x] **port**\n: 必选.为接口对象.获取方式如:port = getattr(dut1,PORT1)获取了DUT1设备上PORT1接口对象\n- [ ]  **expect_count**\n: 可选.为检查要存在的OSPF邻居个数\n> 返回值:\n        无\n```python\ndut.send('''\nctrl+z\nreset ospf <pro_number> process\ny\n''')\ndut.CheckCommand(f'OSPF<pro_number>在接口<port>上的邻居已恢复',\n        cmd=f'display ospf <pro_number> peer verbose',\n        expect=['State: Full'],\n        expect_count=<expect_count>,\n        relationship='and',\n        stop_max_attempt=6,\n        wait_fixed=3)\n```"
    },
    {
        "Business_Tag": "OSPF Reset进程",
        "AW_Name": "OSPF Reset进程后检查LSA",
        "AW_CONTENT_Example": "#OSPF Reset进程，恢复后检查DUT1和DUT2之间的邻居状态为FULL\n\t\tgl.DUT1.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\treset ospf 65535 process\n\t\t\t\ty\n\t\t\t\t''')\n\t\t# 等待 10 s\n\t\tatf_wait('固定等待', 10)  \t\t\n\t\t#检查DUT1上OSPF进程65535的所有LSA信息\n\t\tgl.DUT1.CheckCommand('检查DUT1上OSPF进程65535的所有LSA信息，存在1类LSA 10.2.1.1，2类LSA 11.3.1.1，3类LSA 10.3.1.1',\n\t\t\t\t\t\t\tcmd='display ospf 65535 lsdb',\n\t\t\t\t\t\t\texpect=['Router    10.2.1.1',\n\t\t\t\t\t\t\t'Network   11.3.1.1',\n\t\t\t\t\t\t\t'Sum-Net   10.3.1.1'],\n\t\t\t\t\t\t\trelationship = 'and',\n\t\t\t\t\t\t\tstop_max_attempt=6,\n\t\t\t\t\t\t\twait_fixed=5)"
    },
    {
        "Business_Tag": "OSPF Reset进程",
        "AW_Name": "OSPF Reset进程后检查路由",
        "AW_CONTENT_Example": "#OSPF Reset进程，恢复后检查DUT1上路由信息\n\t\tgl.DUT1.send(f'''\n\t\t\t\tctrl+z\n\t\t\t\treset ospf 65535 process\n\t\t\t\ty\n\t\t\t\t''')\n\t\t# 等待 10 s\n\t\tatf_wait('固定等待', 10)  \t\t\n\t\t#检查DUT1上OSPF路由信息\n\t\tgl.DUT1.CheckCommand('检查DUT1上OSPF进程65535存在DUT5的loopback0接口的OSPF路由10.5.1.1',\n\t\t\t\t\t\t\tcmd='display ospf 65535 routing  10.5.1.1 32',\n\t\t\t\t\t\t\texpect=['10.5.1.1/32        2        Inter'],\n\t\t\t\t\t\t\trelationship = 'and',\n\t\t\t\t\t\t\tstop_max_attempt=6,\n\t\t\t\t\t\t\twait_fixed=5) \n\t\tgl.DUT1.CheckCommand('DUT1 ping DUT5的loopback0可以ping通',\n\t\t\t\t\t\t\tcmd='ping -a 10.1.1.1 10.5.1.1',\n\t\t\t\t\t\t\texpect=['5 packet(s) received, 0.0% packet loss'],\n\t\t\t\t\t\t\trelationship = 'and',\n\t\t\t\t\t\t\tstop_max_attempt=3,\n\t\t\t\t\t\t\twait_fixed=5)"
    },
    {
        "Business_Tag": "进程检查",
        "AW_Name": "OSPF进程检查",
        "AW_CONTENT_Example": "- AW名:OSPF进程检查\n> 功能介绍:对OSPF进程的RouterID或区域信息或路由器类型进行校验\n> 参数说明:\n- [x]  **dut**\n: 必选.为设备对象\n- [x]  **pro_number**\n: 必选.为协议号\n- [x] **router_id**\n: 必选.OSPF进程的RouterID值\n- [x]  **kwargs**\n: 必选.有以下值可选\n    - [ ]  RouterID: **router_id**\n    : 可选. OSPF协议的RouterID值.格式为ip地址格式\n    - [ ]  Router type: **router_type**\n    : 可选.为OSPF协议路由器角色.\n    - [ ]  Area count: **area_count**\n    : 可选.OSPF协议当前区域总计个数\n    - [ ]  Area: **area_id**\n    : 可选.OSPF协议存在的区域值.需要为ip地址格式\n- [x]  **expect_count**\n: 必选.为检查要匹配存在的个数.默认应为1\n```python\n<dut>.CheckCommand('<dut>检查OSPF协议<pro_number>进程信息',\n        cmd='display ospf <pro_number>',\n        expect=[<kwargs>],\n        expect_count=<expect_count>,\n        relationship='and',\n        stop_max_attempt=7,\n        wait_fixed=2)\n```"
    },
    {
        "Business_Tag": "进程检查",
        "AW_Name": "OSPF区域类型检查",
        "AW_CONTENT_Example": "- AW名:OSPF区域类型检查\n> 功能介绍:对OSPF的指定区域类型进行校验\n> 参数说明:\n- [x]  **dut**\n: 必选.为设备对象\n- [x]  **pro_number**\n: 必选.为协议号\n- [x] **area_1**\n: 必选.指定OSPF区域值,支持int和ip地址格式.\n- [ ]  **arg1**\n: 必选. 区域类型.默认应为Normal：普通区域.可选Normal、Stub、StubNoSummary、NSSA、NSSANoSummary\n- [ ]  **arg2**\n: 可选.为OSPF协议路由器角色\n- [ ]  Options:**arg3**\n: 可选.为要检查的发布LSA的Options值\n- [x]  **expect_count**\n: 必选.为检查要匹配存在的个数.默认应为1\n```python\n<dut>.CheckCommand('<dut>检查OSPF协议<pro_number>进程的信息',\n        cmd='display ospf <pro_number>',\n        expect=['Area flag: <arg1>'],\n        expect_count=<expect_count>,\n        starts=f'Area:{ipaddress.ip_address(<area_1>)}',\n        ends='ExChange/Loading neighbors',\n        relationship='and',\n        stop_max_attempt=7,\n        wait_fixed=2)\n```"
    },
    {
        "Business_Tag": "接口检查",
        "AW_Name": "OSPF接口检查",
        "AW_CONTENT_Example": "- AW名:OSPF接口检查\n> 功能介绍:对OSPF的指定接口网络类型或定时器或路由开销值或路由开销值来源进行校验\n> 参数说明:\n- [x]  **dut**\n: 必选.为设备对象.\n- [x]  **pro_number**\n: 必选.为协议号.\n- [x] **port**\n: 必选.为接口对象.获取方式如:port = getattr(dut1,PORT1)获取了DUT1设备上PORT1接口对象\n- [x]  **kwargs**\n: 必选.有以下值可选\n    - [ ]  Cost: **cost**\n    : 可选. 接口下的OSPF路由开销值.\n    - [ ]  Type: **type**\n    : 可选.为OSPF接口的网络类型.默认为Broadcast.\n    - [ ]  Cost source:: **cost_src**\n    : 可选.OSPF接口的路由开销来源.默认为Default\n    - [ ]  Area: **area_id**\n    : 可选.OSPF协议存在的区域值.需要为ip地址格式\n    - [ ]  Timers: Hello **hello**, Dead **dead**, Poll **poll**, Retransmit **retrsmt**\n    : 可选.OSPF协议的定时器.网络类型为brocast只检查Hello **hello**, Dead **dead**.网络类型为NBMA填入Poll **poll**, Retransmit **retrsmt**.\n- [x]  **expect_count**\n: 必选.为检查要匹配存在的个数.默认应为1\n```python\n<dut>.CheckCommand('<dut>检查OSPF协议<pro_number>进程的接口<port>的网络类型和定时器检查',\n        cmd=f'display ospf <pro_number> interface {<port>.intf}',\n        expect=['<kwargs>'],\n        expect_count=<expect_count>,\n        relationship='and',\n        stop_max_attempt=7,\n        wait_fixed=2)\n```"
    },
    {
        "Business_Tag": "邻居检查",
        "AW_Name": "OSPF所有邻居状态检查",
        "AW_CONTENT_Example": "\t\t#检查DUT1上OSPF进程65535所有的OSPF邻居状态\n\t\tgl.DUT1.CheckCommand('检查DUT1上OSPF进程65535的OSPF邻居状态为有2个FULL',\n\t\t\t\t\t\t\tcmd='display ospf 65535 peer',\n\t\t\t\t\t\t\texpect=['Full'], expect_count=2,\n\t\t\t\t\t\t\trelationship = 'and',\n\t\t\t\t\t\t\tstop_max_attempt=3,\n\t\t\t\t\t\t\twait_fixed=5)"
    },
    {
        "Business_Tag": "邻居检查",
        "AW_Name": "OSPF所有邻居状态统计",
        "AW_CONTENT_Example": "\t\t#检查DUT1上OSPF进程65535所有的OSPF邻居状态统计\t\t\t\t\t\n\t\tgl.DUT1.CheckCommand('检查DUT1上OSPF进程65535所有的OSPF邻居状态统计,area 0 FULL个数1个，area 1 FULL状态个数1个，累计2个',\n\t\t\t\t\t\t\tcmd='display ospf peer statistics',\n\t\t\t\t\t\t\texpect=['0.0.0.0         0    0       0    0     0       0        0       1    1\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t0.0.0.1         0    0       0    0     0       0        0       1    1',\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t'Total           0    0       0    0     0       0        0       2    2'],\n\t\t\t\t\t\t\trelationship = 'and',\n\t\t\t\t\t\t\tstop_max_attempt=6,\n\t\t\t\t\t\t\twait_fixed=5)"
    },
    {
        "Business_Tag": "邻居检查",
        "AW_Name": "OSPF指定接口查看邻居状态",
        "AW_CONTENT_Example": "\t\t#检查DUT1上OSPF进程65535的接口port1的邻居状态\n\t\tgl.DUT1.CheckCommand('检查DUT1上OSPF进程65535的接口port1的邻居状态为FULL',\n\t\t\t\t\t\t\tcmd=f'''display ospf 65535 peer {gl.DUT1.PORT1.intf}''',\n\t\t\t\t\t\t\texpect=['Full'], expect_count=1,\n\t\t\t\t\t\t\trelationship = 'and',\n\t\t\t\t\t\t\tstop_max_attempt=3,\n\t\t\t\t\t\t\twait_fixed=5)"
    },
    {
        "Business_Tag": "邻居检查",
        "AW_Name": "OSPF LSA检查",
        "AW_CONTENT_Example": "\t\t#检查DUT1上OSPF进程65535的所有LSA信息\n\t\tgl.DUT1.CheckCommand('检查DUT1上OSPF进程65535的所有LSA信息，存在1类LSA 10.2.1.1，2类LSA 11.3.1.1，3类LSA 10.3.1.1',\n\t\t\t\t\t\t\tcmd='display ospf 65535 lsdb',\n\t\t\t\t\t\t\texpect=['Router    10.2.1.1',\n\t\t\t\t\t\t\t'Network   11.3.1.1',\n\t\t\t\t\t\t\t'Sum-Net   10.3.1.1'],\n\t\t\t\t\t\t\trelationship = 'and',\n\t\t\t\t\t\t\tstop_max_attempt=6,\n\t\t\t\t\t\t\twait_fixed=5)"
    },
    {
        "Business_Tag": "邻居检查",
        "AW_Name": "OSPF 1类LSA检查",
        "AW_CONTENT_Example": "\t\t#检查DUT1上OSPF进程65535的1类LSA信息\n\t\tgl.DUT1.CheckCommand('检查DUT1上OSPF进程65535的area 0存在1类LSA 10.2.1.1，adv router为10.2.1.1，Options为ASBR ABR O E，Metiric为1',\n\t\t\t\t\t\t\tcmd='display ospf 65535 area 0 lsdb router 10.2.1.1',\n\t\t\t\t\t\t\texpect=['Adv Rtr   : 10.2.1.1',\n\t\t\t\t\t\t\t'Options   : ASBR ABR O E',\n\t\t\t\t\t\t\t'Metric : 1'],\n\t\t\t\t\t\t\trelationship = 'and',\n\t\t\t\t\t\t\tstop_max_attempt=6,\n\t\t\t\t\t\t\twait_fixed=5)"
    },
    {
        "Business_Tag": "邻居检查",
        "AW_Name": "OSPF 2类LSA检查",
        "AW_CONTENT_Example": "\t\t#检查DUT1上OSPF进程65535的2类LSA信息\n\t\tgl.DUT1.CheckCommand('检查DUT1上OSPF进程65535的area 0存在2类LSA 11.3.1.1，adv router为10.2.1.1，Options为O E，Attached router为10.4.1.1和10.2.1.1',\n\t\t\t\t\t\t\tcmd='display ospf 65535 area 0 lsdb network 11.3.1.1',\n\t\t\t\t\t\t\texpect=['Adv Rtr   : 10.2.1.1',\n\t\t\t\t\t\t\t'Options   : O E',\n\t\t\t\t\t\t\t'Attached router    10.4.1.1',\n\t\t\t\t\t\t\t'Attached router    10.2.1.1'],\n\t\t\t\t\t\t\trelationship = 'and',\n\t\t\t\t\t\t\tstop_max_attempt=6,\n\t\t\t\t\t\t\twait_fixed=5)"
    },
    {
        "Business_Tag": "邻居检查",
        "AW_Name": "OSPF 3类LSA检查",
        "AW_CONTENT_Example": "- OSPF 3类LSA检查\n> 对OSPF的type-3 LSA进行检查.参数说明:\n- [x]  **dut**\n: 必选.为设备对象\n- [x]  **pro_number**\n: 必选.为协议号\n- [ ]  **kwarg1**\n: 可选.\n    - [ ] area **area_id** \n    : 可选.为指定区域\n- [ ]  **ls_id** \n: 可选.为LSA的link-id值\n- [ ]  **kwarg2**\n: 可选.\n    - [ ] originate-router **router_id**\n    : 产生LSA的OSPF Rouer-id \n    - [ ] self-originate\n    : 为自产生的LSA\n    - [ ] originate-router **router_id**\n    : 指定产生LSA的OSPF Router-id\n- [ ]  **kwarg3**\n: 可选.为期望回显信息中包含值\n    - [ ]  LS ID:**arg1**\n    : 可选.为要检查的Link-state ID值\n    - [ ]  Adv Rtr**arg2**\n    : 可选.为要检查的发布LSA的OSPF router-id\n    - [ ]  Options:**arg3**\n    : 可选.为要检查的发布LSA的Options值\n- [ ]  **expect_count**\n: 可选.为检查要匹配存在的个数\n```python\n<dut>.CheckCommand('<dut>检查OSPF协议<pro_number>的3类LSA值',\n        cmd='display ospf <pro_number> <kwarg1> lsdb summary <ls_id> <kwarg2>',\n        expect=['LS ID:<arg1>','Adv Rtr:<arg2>','Options: <arg3>'],\n        expect_count=<expect_count>,\n        relationship='and',\n        stop_max_attempt=7,\n        wait_fixed=2)\n```"
    },
    {
        "Business_Tag": "邻居检查",
        "AW_Name": "OSPF 4类LSA检查",
        "AW_CONTENT_Example": "\t\t#检查DUT1上OSPF进程65535的4类LSA信息\n\t\tgl.DUT1.CheckCommand('检查DUT1上OSPF进程65535的area 0存在4类LSA 10.2.1.1，adv router为10.4.1.1，Options为O E，Metric为2',\n\t\t\t\t\t\t\tcmd='display ospf 65535 area 0 lsdb asbr 10.2.1.1',\n\t\t\t\t\t\t\texpect=['Adv Rtr   : 10.4.1.1',\n\t\t\t\t\t\t\t'Options   : O E',\n\t\t\t\t\t\t\t'MTID   0 Metric: 2'],\n\t\t\t\t\t\t\trelationship = 'and',\n\t\t\t\t\t\t\tstop_max_attempt=6,\n\t\t\t\t\t\t\twait_fixed=5)"
    },
    {
        "Business_Tag": "邻居检查",
        "AW_Name": "OSPF 5类LSA检查",
        "AW_CONTENT_Example": "- AW名:OSPF 5类LSA检查\n> 功能介绍:对OSPF的type-5 LSA进行检查.\n\n> 参数说明:\n- [x]  **dut**\n: 必选.为设备对象\n- [ ]  **pro_number**\n: 可选.为OSPF协议号\n- [ ]  **kwarg1**\n: 可选.\n    - [ ] area **area_id** \n    : 可选.为指定区域\n- [ ]  **ls_id** \n: 可选.为LSA的link-id值\n- [ ]  **kwarg2**\n: 可选.\n    - [ ] originate-router **router_id**\n    : 指定产生LSA的OSPF Rouer-id \n    - [ ] self-originate\n    : 为自产生的LSA\n    - [ ] originate-router **router_id**\n    : 指定产生LSA的OSPF Router-id\n- [ ]  **kwarg3**\n: 可选.为期望回显信息中包含值\n    - [ ]  LS ID:**arg1**\n    : 可选.为要检查的Link-state ID值\n    - [ ]  Adv Rtr**arg2**\n    : 可选.为要检查的发布LSA的OSPF router-id\n    - [ ]  Options:**arg3**\n    : 可选.为要检查的发布LSA的Options值\n    - [ ]  E Type:**arg4**\n    : 可选.为要检查LSA的E Type.可为1或2\n    - [ ]  Tag:**arg5**\n    : 可选.为要检查LSA的Tag值.可为0～4294967295\n- [ ]  **expect_count**\n: 可选.为检查要匹配存在的个数\n```python\n<dut>.CheckCommand('<dut>检查OSPF协议<pro_number>的3类LSA值',\n        cmd='display ospf <pro_number> lsdb ase <ls_id> <kwarg2>',\n        expect=['LS ID:<arg1>','Adv Rtr:<arg2>','Options: <arg3>'],\n        expect_count=<expect_count>,\n        relationship='and',\n        stop_max_attempt=7,\n        wait_fixed=2)\n```"
    },
    {
        "Business_Tag": "邻居检查",
        "AW_Name": "OSPF 7类LSA检查",
        "AW_CONTENT_Example": "\t\t#检查DUT1上OSPF进程65535的7类LSA信息\t\t\t\t\t\t\t\n\t\tgl.DUT1.CheckCommand('检查DUT1上OSPF进程65535存在7类LSA 1.2.3.4，且FA地址填非0，优选使能了ospf的loop口为FA地址cost 16777214 type 1 tag 4294967295',\n\t\t\t\t\t\t\t cmd='display ospf 65535 lsdb nssa 1.2.3.4',\n\t\t\t\t\t\t\t expect=['Type      : NSSA',\n\t\t\t\t\t\t\t 'Options   : O NP',\n\t\t\t\t\t\t\t 'MTID   0 Metric   : 16777214',\n\t\t\t\t\t\t\t 'E Type            : 1',\n\t\t\t\t\t\t\t 'Forwarding Address: 10.1.1.1',\n\t\t\t\t\t\t\t 'Tag               : 4294967295'],\n\t\t\t\t\t\t\t not_expect=['Forwarding Address: 0.0.0.0'],\n\t\t\t\t\t\t\t relationship = 'and',\n\t\t\t\t\t\t\t stop_max_attempt=6,\n\t\t\t\t\t\t\t wait_fixed=5)"
    },
    {
        "Business_Tag": "路由检查",
        "AW_Name": "OSPF路由检查",
        "AW_CONTENT_Example": "- AW名:OSPF路由检查\n> 功能介绍:对OSPF的路由表进行详细检查.\n\n> 参数说明:\n- [x]  **dut**\n: 必选.为设备对象\n- [ ]  **pro_number**\n: 可选.为OSPF协议号\n- [x]  **ip_address**\n: 必选.为聚合路由目的地址\n- [x]  **mask_len**\n: 必选.为聚合路由的掩码长度或掩码值\n- [ ]  **expect_count**\n: 可选.为检查要匹配存在的个数\n- [x]  **kwarg3**\n: 必选.为期望回显信息中包含值,需要在以下可选项中选择\n    - [ ]  Type:**arg1**\n    : 可选.为OSPF路由表详细信息的路由类型\n    - [ ]  AdvRouter:**arg2**\n    : 可选.为路由地址的发布路由器ID,可通过数据提取AW类获取到\n    - [x]  NextHop:**arg3**\n    : 必选.为主下一跳IP地址\n    - [ ] BkNextHop:**arg4**\n    : 可选.为备份下一跳IP地址\n    - [x]  Interface:**arg5**\n    : 必选.为路由出接口\n    - [ ]  BkInterface:**arg6**\n    : 可选.为路由备份出接口\n    - [ ]  Status:**arg7**\n    : 可选.为路由状态\n```python\n<dut>.CheckCommand('<dut>检查OSPF协议<pro_number>的路由地址详细信息',\n        cmd='display ospf <pro_number> routing <ip> <masklen> verbose',\n        expect=['Type: <arg1>','AdvRouter:<arg2>','NextHop: <arg3>','BkNextHop:<arg4>','Interface: <arg5>','Status:<arg7>'],\n        expect_count=<expect_count>,\n        relationship='and',\n        stop_max_attempt=7,\n        wait_fixed=2)\n```"
    },
    {
        "Business_Tag": "OSPF进程",
        "AW_Name": "OSPF进程RouterID值",
        "AW_CONTENT_Example": "- AW名:获取OSPF进程RouterID值\n> 功能介绍: 提取OSPF协议指定进程号的RouterID值\n> 参数说明:\n    - [x]  **dut**\n    : 必选.为设备对象.获取方式如:dut1=getattr(gl,'DUT1'),'DUT1'为设备名称\n    - [x]  **pro_number**\n    : 必选.为OSPF协议号或进程号\n\n> 返回值: router_id\n```python\nrouter_id = <dut>.getStringValue(cmd=f'display ospf {pro_number}',\n                    target=['RouterID'],\n                    match='first',\n                    starts='OSPF Protocol Information',\n                    ends='Multi-VPN-Instance is not enabled',\n                    timeout=3,\n                    rule=2, is_strict=False)\n```"
    },
    {
        "Business_Tag": "OSPF进程",
        "AW_Name": "获取OSPF进程接口信息",
        "AW_CONTENT_Example": "- AW名:获取OSPF进程接口信息\n> 功能介绍: 提取OSPF协议指定进程号接口信息.包括区域ID、接口开销值、接口开销来源、网络类型\n\n> 参数说明:\n- [x]  **dut**\n: 必选.为设备对象.获取方式如:dut1=getattr(gl,'DUT1'),'DUT1'为设备名称\n- [x]  **pro_number**\n: 必选.为OSPF协议号或进程号\n- [x] **port**\n: 必选.为接口对象.获取方式如:port = getattr(dut1,PORT1)获取了DUT1设备上PORT1接口对象\n\n> 返回值: \n- area_id\n: 指定接口所在的区域ID\n- cost\n: 指定接口的OSPF协议开销值\n- cost_source\n: 指定接口的OSPF协议开销值来源\n- type\n: 指定接口的OSPF网络类型\n```python\narea_id,cost,cost_source,type = <dut>.getStringValue(cmd=f'display ospf <pro_number> interface <port>.intf',\n                    target=['Area','Cost','Cost Source','Type'],\n                    match='first',\n                    timeout=3,\n                    rule=2, is_strict=False)\n```"
    }
]